import logging
import os
import psycopg2
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

# –¢–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞ (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞)
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, MANAGE_USERS, MANAGE_QUESTIONS, MANAGE_PROMPTS, 
 ADD_USER, REMOVE_USER, LIST_USERS, SELECT_BUSINESS_TYPE, 
 ADD_BUSINESS_TYPE, ADD_QUESTION_FOR_TYPE, EDIT_QUESTION, EDIT_PROMPT) = range(12)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_connection():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(
        host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_business_types():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_connection()
    cur = conn.cursor()
    
    cur.execute("SELECT DISTINCT business_type FROM users")
    types = [row[0] for row in cur.fetchall()]
    
    cur.close()
    conn.close()
    
    return types

def get_users_by_business_type(business_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    cur.execute("SELECT telegram_id FROM users WHERE business_type = %s", (business_type,))
    users = [row[0] for row in cur.fetchall()]
    
    cur.close()
    conn.close()
    
    return users

def add_user(telegram_id, business_type):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute(
            "INSERT INTO users (telegram_id, business_type) VALUES (%s, %s) ON CONFLICT (telegram_id) DO UPDATE SET business_type = %s",
            (telegram_id, business_type, business_type)
        )
        conn.commit()
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()
        success = False
    
    cur.close()
    conn.close()
    
    return success

def remove_user(telegram_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("DELETE FROM users WHERE telegram_id = %s", (telegram_id,))
        deleted = cur.rowcount > 0
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()
        deleted = False
    
    cur.close()
    conn.close()
    
    return deleted

def get_questions_for_business_type(business_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    cur.execute(
        "SELECT id, question_text, question_order FROM questions WHERE business_type = %s ORDER BY question_order",
        (business_type,)
    )
    questions = [(row[0], row[1], row[2]) for row in cur.fetchall()]
    
    cur.close()
    conn.close()
    
    return questions

def add_business_type(business_type):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ–≥–æ."""
    conn = get_connection()
    cur = conn.cursor()
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
    standard_questions = [
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏–ª–æ –∏–ª–∏ –≤–ø–µ—á–∞—Ç–ª–∏–ª–æ –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏?",
        "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤—ã–∑–≤–∞–ª–∏ —É –≤–∞—Å –¥–æ–≤–µ—Ä–∏–µ –∏ –ø–æ–º–æ–≥–ª–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ?",
        "–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Ä–µ—à–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è?",
        "–ü–æ—á–µ–º—É –±—ã –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –Ω–∞—Å –¥—Ä—É–∑—å—è–º –∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º?"
    ]
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
        for i, question in enumerate(standard_questions):
            cur.execute(
                "INSERT INTO questions (business_type, question_text, question_order) VALUES (%s, %s, %s)",
                (business_type, question, i)
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
        standard_prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤:\n\n{}\n\n–°–æ—Å—Ç–∞–≤—å —Å–≤—è–∑–Ω—ã–π, —Ç–µ–ø–ª—ã–π –æ—Ç–∑—ã–≤, –±—É–¥—Ç–æ –ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–º."
        cur.execute(
            "INSERT INTO prompts (business_type, prompt_text) VALUES (%s, %s) ON CONFLICT (business_type) DO UPDATE SET prompt_text = %s",
            (business_type, standard_prompt, standard_prompt)
        )
        
        conn.commit()
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞: {e}")
        conn.rollback()
        success = False
    
    cur.close()
    conn.close()
    
    return success

def add_question(business_type, question_text, question_order):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute(
            "INSERT INTO questions (business_type, question_text, question_order) VALUES (%s, %s, %s)",
            (business_type, question_text, question_order)
        )
        conn.commit()
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        conn.rollback()
        success = False
    
    cur.close()
    conn.close()
    
    return success

def update_question(question_id, new_text):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute(
            "UPDATE questions SET question_text = %s WHERE id = %s",
            (new_text, question_id)
        )
        conn.commit()
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        conn.rollback()
        success = False
    
    cur.close()
    conn.close()
    
    return success

def get_prompt(business_type):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    cur.execute("SELECT prompt_text FROM prompts WHERE business_type = %s", (business_type,))
    result = cur.fetchone()
    
    cur.close()
    conn.close()
    
    if result:
        return result[0]
    else:
        return "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤:\n\n{}\n\n–°–æ—Å—Ç–∞–≤—å —Å–≤—è–∑–Ω—ã–π, —Ç–µ–ø–ª—ã–π –æ—Ç–∑—ã–≤, –±—É–¥—Ç–æ –ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –¥–æ–≤–æ–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–º."

def update_prompt(business_type, new_prompt):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute(
            "INSERT INTO prompts (business_type, prompt_text) VALUES (%s, %s) ON CONFLICT (business_type) DO UPDATE SET prompt_text = %s",
            (business_type, new_prompt, new_prompt)
        )
        conn.commit()
        success = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        conn.rollback()
        success = False
    
    cur.close()
    conn.close()
    
    return success

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    return show_main_menu(update, context)

def show_main_menu(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
        [InlineKeyboardButton("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="manage_questions")],
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏", callback_data="manage_prompts")],
        [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="exit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        update.message.reply_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    else:
        update.callback_query.edit_message_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    
    return MAIN_MENU

def main_menu_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    query = update.callback_query
    query.answer()
    
    if query.data == "manage_users":
        return show_user_management(update, context)
    elif query.data == "manage_questions":
        return show_question_management(update, context)
    elif query.data == "manage_prompts":
        return show_prompt_management(update, context)
    elif query.data == "exit":
        query.edit_message_text("–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    else:
        return show_main_menu(update, context)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def show_user_management(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="remove_user")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=reply_markup)
    
    return MANAGE_USERS

def user_management_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    query = update.callback_query
    query.answer()
    
    if query.data == "add_user":
        business_types = get_business_types()
        
        if not business_types:
            # –ï—Å–ª–∏ —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞", callback_data="add_business_type")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞:", reply_markup=reply_markup)
            return SELECT_BUSINESS_TYPE
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
        keyboard = []
        for btype in business_types:
            keyboard.append([InlineKeyboardButton(btype, callback_data=f"select_type:{btype}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø", callback_data="add_business_type")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
        
        return SELECT_BUSINESS_TYPE
    
    elif query.data == "remove_user":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        return REMOVE_USER
    
    elif query.data == "list_users":
        return show_user_list(update, context)
    
    elif query.data == "back_to_main":
        return show_main_menu(update, context)
    
    return MANAGE_USERS

def show_user_list(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –±–∏–∑–Ω–µ—Å–∞."""
    business_types = get_business_types()
    
    if not business_types:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.callback_query.edit_message_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=reply_markup)
        return LIST_USERS
    
    message_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –±–∏–∑–Ω–µ—Å–∞:\n\n"
    
    for btype in business_types:
        users = get_users_by_business_type(btype)
        message_text += f"üìå {btype} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):\n"
        
        for user_id in users:
            message_text += f"   - ID: {user_id}\n"
        
        message_text += "\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    
    return LIST_USERS

def business_type_selection_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    query = update.callback_query
    query.answer()
    
    if query.data == "add_business_type":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞:")
        return ADD_BUSINESS_TYPE
    
    elif query.data == "back_to_user_management":
        return show_user_management(update, context)
    
    elif query.data.startswith("select_type:"):
        business_type = query.data.split(":", 1)[1]
        context.user_data["selected_business_type"] = business_type
        
        query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: {business_type}\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return ADD_USER
    
    return SELECT_BUSINESS_TYPE

def add_business_type_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    business_type = update.message.text.strip()
    
    if add_business_type(business_type):
        context.user_data["selected_business_type"] = business_type
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user_for_new_type")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"‚úÖ –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞ '{business_type}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            reply_markup=reply_markup
        )
        return SELECT_BUSINESS_TYPE
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )
        return SELECT_BUSINESS_TYPE

def add_user_for_new_type_handler(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    query = update.callback_query
    query.answer()
    
    business_type = context.user_data.get("selected_business_type")
    query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: {business_type}\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    return ADD_USER

def add_user_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        telegram_id = int(update.message.text.strip())
        business_type = context.user_data.get("selected_business_type")
        
        if add_user(telegram_id, business_type):
            update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞ '{business_type}'.")
        else:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    except ValueError:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MANAGE_USERS

def remove_user_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        telegram_id = int(update.message.text.strip())
        
        if remove_user(telegram_id):
            update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    except ValueError:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_user_management")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MANAGE_USERS

def user_list_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    query.answer()
    
    if query.data == "back_to_user_management":
        return show_user_management(update, context)
    
    return LIST_USERS

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ ---
def show_question_management(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    business_types = get_business_types()
    
    if not business_types:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞", callback_data="add_business_type")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.callback_query.edit_message_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞:",
            reply_markup=reply_markup
        )
        return SELECT_BUSINESS_TYPE
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
    keyboard = []
    for btype in business_types:
        keyboard.append([InlineKeyboardButton(btype, callback_data=f"question_type:{btype}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏:", reply_markup=reply_markup)
    
    return MANAGE_QUESTIONS

def question_management_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    query = update.callback_query
    query.answer()
    
    if query.data == "back_to_main":
        return show_main_menu(update, context)
    
    elif query.data.startswith("question_type:"):
        business_type = query.data.split(":", 1)[1]
        context.user_data["selected_business_type"] = business_type
        
        return show_questions_for_type(update, context, business_type)
    
    return MANAGE_QUESTIONS

def show_questions_for_type(update: Update, context: CallbackContext, business_type) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    questions = get_questions_for_business_type(business_type)
    
    message_text = f"‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}':\n\n"
    
    if not questions:
        message_text += "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        for q_id, text, order in questions:
            message_text += f"{order+1}. {text} [ID: {q_id}]\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="edit_question")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_management")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    
    return MANAGE_QUESTIONS

def question_action_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    query = update.callback_query
    query.answer()
    
    if query.data == "add_question":
        business_type = context.user_data.get("selected_business_type")
        questions = get_questions_for_business_type(business_type)
        next_order = len(questions)
        
        query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}':")
        context.user_data["next_question_order"] = next_order
        
        return ADD_QUESTION_FOR_TYPE
    
    elif query.data == "edit_question":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        return EDIT_QUESTION
    
    elif query.data == "back_to_question_management":
        return show_question_management(update, context)
    
    return MANAGE_QUESTIONS

def add_question_for_type_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    question_text = update.message.text.strip()
    business_type = context.user_data.get("selected_business_type")
    question_order = context.user_data.get("next_question_order", 0)
    
    if add_question(business_type, question_text, question_order):
        update.message.reply_text(f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}'.")
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_type")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MANAGE_QUESTIONS

def edit_question_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        question_id = int(update.message.text.strip())
        context.user_data["edit_question_id"] = question_id
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º ID
        
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
        return EDIT_QUESTION
    
    except ValueError:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return MANAGE_QUESTIONS

def update_question_text_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    question_id = context.user_data.get("edit_question_id")
    new_text = update.message.text.strip()
    
    if update_question(question_id, new_text):
        update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å ID {question_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å ID {question_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_type")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MANAGE_QUESTIONS

def back_to_question_type_handler(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    query = update.callback_query
    query.answer()
    
    business_type = context.user_data.get("selected_business_type")
    return show_questions_for_type(update, context, business_type)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ ---
def show_prompt_management(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    business_types = get_business_types()
    
    if not business_types:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞", callback_data="add_business_type")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.callback_query.edit_message_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞:",
            reply_markup=reply_markup
        )
        return SELECT_BUSINESS_TYPE
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
    keyboard = []
    for btype in business_types:
        keyboard.append([InlineKeyboardButton(btype, callback_data=f"prompt_type:{btype}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–º:", reply_markup=reply_markup)
    
    return MANAGE_PROMPTS

def prompt_management_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    query = update.callback_query
    query.answer()
    
    if query.data == "back_to_main":
        return show_main_menu(update, context)
    
    elif query.data.startswith("prompt_type:"):
        business_type = query.data.split(":", 1)[1]
        context.user_data["selected_business_type"] = business_type
        
        return show_prompt_for_type(update, context, business_type)
    
    return MANAGE_PROMPTS

def show_prompt_for_type(update: Update, context: CallbackContext, business_type) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞."""
    prompt_text = get_prompt(business_type)
    
    message_text = f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}':\n\n{prompt_text}"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_prompt")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_prompt_management")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    
    return MANAGE_PROMPTS

def prompt_action_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    query = update.callback_query
    query.answer()
    
    if query.data == "edit_prompt":
        business_type = context.user_data.get("selected_business_type")
        prompt_text = get_prompt(business_type)
        
        query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}':\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{prompt_text}\n\n"
            f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '{{}}' –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        
        return EDIT_PROMPT
    
    elif query.data == "back_to_prompt_management":
        return show_prompt_management(update, context)
    
    return MANAGE_PROMPTS

def edit_prompt_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞."""
    new_prompt = update.message.text.strip()
    business_type = context.user_data.get("selected_business_type")
    
    if update_prompt(business_type, new_prompt):
        update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_prompt_management")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MANAGE_PROMPTS

def back_to_prompt_management_handler(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    query = update.callback_query
    query.answer()
    
    return show_prompt_management(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updater = Updater(ADMIN_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_handler, pattern="^(manage_users|manage_questions|manage_prompts|exit)$")
            ],
            MANAGE_USERS: [
                CallbackQueryHandler(user_management_handler, pattern="^(add_user|remove_user|list_users|back_to_main)$")
            ],
            SELECT_BUSINESS_TYPE: [
                CallbackQueryHandler(business_type_selection_handler, pattern="^(add_business_type|back_to_user_management|select_type:.+)$"),
                CallbackQueryHandler(add_user_for_new_type_handler, pattern="^add_user_for_new_type$"),
                MessageHandler(Filters.text & ~Filters.command, add_business_type_handler)
            ],
            ADD_USER: [
                MessageHandler(Filters.text & ~Filters.command, add_user_handler)
            ],
            REMOVE_USER: [
                MessageHandler(Filters.text & ~Filters.command, remove_user_handler)
            ],
            LIST_USERS: [
                CallbackQueryHandler(user_list_handler, pattern="^back_to_user_management$")
            ],
            MANAGE_QUESTIONS: [
                CallbackQueryHandler(question_management_handler, pattern="^(back_to_main|question_type:.+)$"),
                CallbackQueryHandler(question_action_handler, pattern="^(add_question|edit_question|back_to_question_management)$"),
                CallbackQueryHandler(back_to_question_type_handler, pattern="^back_to_question_type$")
            ],
            ADD_QUESTION_FOR_TYPE: [
                MessageHandler(Filters.text & ~Filters.command, add_question_for_type_handler)
            ],
            EDIT_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, edit_question_handler)
            ],
            MANAGE_PROMPTS: [
                CallbackQueryHandler(prompt_management_handler, pattern="^(back_to_main|prompt_type:.+)$"),
                CallbackQueryHandler(prompt_action_handler, pattern="^(edit_prompt|back_to_prompt_management)$"),
                CallbackQueryHandler(back_to_prompt_management_handler, pattern="^back_to_prompt_management$")
            ],
            EDIT_PROMPT: [
                MessageHandler(Filters.text & ~Filters.command, edit_prompt_handler)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()